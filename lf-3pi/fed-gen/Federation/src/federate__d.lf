target C {
  cmake-include: "include/federate__d_extension.cmake",
  compile-definitions: {
    EXECUTABLE_PREAMBLE: "",
    FEDERATED: "",
    FEDERATED_CENTRALIZED: "",
    NUMBER_OF_FEDERATES: "3"
  },
  _fed_setup: "include/_federate__d_preamble.h",
  keepalive: true,
  single-threaded: false
}


preamble {=
#ifdef __cplusplus
extern "C" {
#endif
#include "core/federated/federate.h"
#include "core/federated/net_common.h"
#include "core/federated/net_util.h"
#include "core/federated/clock-sync.h"
#include "core/threaded/reactor_threaded.h"
#include "core/utils/util.h"
extern federate_instance_t _fed;
#ifdef __cplusplus
}
#endif


=}

reactor Dount {
  output out: int
  state c: int = 0
  timer t(0, 2 sec)

  reaction(t) ->
  out {=
    lf_set(out, self->c++);
  =}
}
@_networkReactor("sender")
reactor NetworkSender_0<SENDERINDEXPARAMETER> {
  input[1] msg: int

  reaction(startup) {=
    extern reaction_t* port_absent_reaction[];
    void enqueue_port_absent_reactions(environment_t*);
    LF_PRINT_DEBUG("Adding network port absent reaction to table.");
    port_absent_reaction[SENDERINDEXPARAMETER] = &self->_lf__reaction_2;
    LF_PRINT_DEBUG("Added network output control reaction to table. Enqueueing it...");
    enqueue_port_absent_reactions(self->base.environment);
  =}

  reaction(msg) {=
    // Sending from msg[0] in federate federate__d to p.in2 in federate federate__p
    if (!msg[0]->is_present) {
    return;
    }
    size_t _lf_message_length = sizeof(int);
    send_timed_message(self->base.environment, NEVER, MSG_TYPE_TAGGED_MESSAGE, 1, 2, "federate 2 via the RTI", _lf_message_length, (unsigned char*)&msg[0]->value);
  =}

  reaction() msg {=
    // If the output port has not been lf_set for the current logical time,
    // send an ABSENT message to the receiving federate
    LF_PRINT_LOG("Executing port absent reaction for port %d to federate %d at time %lld.",
              1, 2, (long long) lf_time_logical_elapsed());
    if (msg[0] == NULL || !msg[0]->is_present) {
    LF_PRINT_LOG("The output port is NULL or it is not present.");
        send_port_absent_to_federate(self->base.environment, NEVER, 1, 2);
    }
  =}
}
@_fed_config()
main reactor  {

    d = new Dount()
    
    
    
    
    
    @_tpoLevel(3)
    ns_federate__p_0 = new NetworkSender_0<{= 0 =}>()
    
    
    d.out -> ns_federate__p_0.msg
}

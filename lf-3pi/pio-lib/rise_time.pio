.program rise_time

; THROUGHOUT THIS PROGRAM:
;   . Both Autopull and Autopush should be disabled.
;   . Scratch register X is used as the clock cycle counter.
;   . Scratch register Y is used as temp space.
;   . ISR is used as a counter for the number of rises.
;   . OSR is initialized at the "init" stage to a rise count limit to which
;     ISR is compared to. The total number of rises to measure before an
;     output IRQ is asserted is this number plus 1.
;   . The jmp_pin is set to the low-threshold input pin because it's used more
;     frequently as a jmp condition.
;   . The ONLY input pin enabled is the high-threshold input pin.

init:
    pull block     ; Pulls the rise count limit into the OSR register.

.wrap_target       ; The program should restart from here.
reset:
    mov isr, osr   ; Reset rise counter to its limit.
    jmp pin reset  ; Keep looping in "reset" mode until pin is low.
                   ; Falls through to "low" mode and start monitoring.

low:
    jmp pin low_rising      ; The low-threshold input pin is high.
    jmp low                 ; The low-threshold input pin is low, keep looping
                            ; in low.

low_rising:                     ; Reaches here if low-threshold is high.
    mov y, pins                 ; Copy high-threshold value to y.
    jmp y-- resolution_warning  ; If high-threshold value is high, it means that
                                ; the rise time was too short to be detected
                                ; using this method.
    set x 0 [1]                 ; Set x to 0 and delay 1 cycle. Then, start
                                ; cycle counting.
    ; Falls through to "rise".

rise:
    jmp pin capacitance_warning  ; If low-threshold becomes low before we reaches
                                 ; "high", the current rise failed.
    jmp x-- rise_continue        ; Decrement x every 4 cycles and continue.
                                 ; IMPORTANT: THE NUMBER OF CYCLES HERE DEPEND ON
                                 ; THE ACTUAL ASSEMBLY CODE. MUST ADJUST C CODE
                                 ; ACCRODINGLY TO CALCULATE RISE TIME.

rise_continue:
    mov y, pins              ; Copy high-threshold value to y.
    jmp !y rise              ; If high-threshold is low, stay in "rise" mode.
    ; Falls through to "high".

high:
    mov isr, y     ; Copy rise counter value from ISR to y so that we can modify.
    jmp y-- reset  ; Decrement the rise counter in ISR. If it was 0 to begin with, go to "output" mode.

output:
    mov isr, x     ; Copy the total number of clock cycles spent in "rise" mode to ISR.
    push block     ; Pushes the cycle count to RX FIFO.
    irq wait 1     ; Signals 
.wrap  ; Restart the program.

resolution_warning:
    ; TODO: send out res_warning
    jmp high

capacitance_warning:
    ; TODO: send out cap_warning
    jmp reset

% c-sdk {
static inline void hello_program_init(PIO pio, uint sm, uint offset, uint pin) {
    pio_sm_config c = hello_program_get_default_config(offset);

    ; Map the state machine's OUT pin group to one pin, namely the `pin`
    ; parameter to this function.
    sm_config_set_out_pins(&c, pin, 1);
    ; Set this pin's GPIO function (connect PIO to the pad)
    pio_gpio_init(pio, pin);
    ; Set the pin direction to output at the PIO
    pio_sm_set_consecutive_pindirs(pio, sm, pin, 1, true);

    ; Load our configuration, and jump to the start of the program
    pio_sm_init(pio, sm, offset, &c);
    ; Set the state machine running
    pio_sm_set_enabled(pio, sm, true);
}
%}

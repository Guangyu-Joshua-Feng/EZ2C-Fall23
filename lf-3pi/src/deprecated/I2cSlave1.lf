target C {
  platform: {
    name: "rp2040",
    board: "pololu_3pi_2040_robot"
  },
  threading: false,
  cmake-include: ["../cmake_include/i2c.txt"]
}

preamble {=
  #include <stdio.h>
  #include <pico/stdlib.h>
  #include <hardware/gpio.h>
  #include <pico/binary_info.h>
  #include <hardware/i2c.h>
  #include <pico/i2c_slave.h>
  #include <string.h>

  #define ADDR 0x55
  #define PICO_DEFAULT_I2C_SDA_PIN 4
  #define PICO_DEFAULT_I2C_SCL_PIN 5
=}

main reactor {
  preamble {=

      static bool led;
      static struct
    {
        uint8_t mem[256];
        uint8_t mem_address;
        bool mem_address_written;
    } context;

      static void i2c_slave_handler(i2c_inst_t *i2c, i2c_slave_event_t event) {
        switch (event) {
        case I2C_SLAVE_RECEIVE: // master has written some data
            if (!context.mem_address_written) {
                // writes always start with the memory address
                context.mem_address = i2c_read_byte_raw(i2c);
                context.mem_address_written = true;
            } else {
                // save into memory
                context.mem[context.mem_address] = i2c_read_byte_raw(i2c);
                context.mem_address++;

                led = !led;
                gpio_put(16, !led);
            }
            break;
        case I2C_SLAVE_REQUEST: // master is requesting data
            // load from memory
            i2c_write_byte_raw(i2c, context.mem[context.mem_address]);
            context.mem_address++;
            break;
        case I2C_SLAVE_FINISH: // master has signalled Stop / Restart
            context.mem_address_written = false;
            break;
        default:
            break;
        }
      }

      static void setup_slave() {
        gpio_init(PICO_DEFAULT_I2C_SDA_PIN);
        gpio_init(PICO_DEFAULT_I2C_SCL_PIN);
        gpio_set_function(PICO_DEFAULT_I2C_SDA_PIN, GPIO_FUNC_I2C);
        gpio_set_function(PICO_DEFAULT_I2C_SCL_PIN, GPIO_FUNC_I2C);
        // gpio_pull_up(PICO_DEFAULT_I2C_SDA_PIN);
        // gpio_pull_up(PICO_DEFAULT_I2C_SCL_PIN);
        gpio_disable_pulls(PICO_DEFAULT_I2C_SDA_PIN);
        gpio_disable_pulls(PICO_DEFAULT_I2C_SCL_PIN);
        i2c_init(i2c0, 100);
        // i2c_set_slave_mode(i2c0, true, ADDR);
        i2c_slave_init(i2c0,ADDR,&i2c_slave_handler);
      }
  =}

  timer t(0, 1000 ms)
  state LED : bool;
  reaction(startup) {=
    // I2C initialization
    setup_slave();
    gpio_init(16);
    gpio_set_dir(16, GPIO_OUT);
    gpio_init(0);
    gpio_set_dir(0, GPIO_OUT);
  =}

  reaction(t) {=
    self->LED = !self->LED;
    gpio_put(0, !self->LED);
  =}
}

target C {
  platform: {
    name: "rp2040",
    board: "pololu_3pi_2040_robot"
  },
  threading: false,
  cmake-include: ["../cmake_include/i2c.txt"]
}

preamble {=
  #include <stdio.h>
  #include <pico/stdlib.h>
  #include <hardware/gpio.h>
  #include <pico/binary_info.h>
  #include <hardware/i2c.h>
  #include <pico/i2c_slave.h>
  #include <string.h>

  #define ADDR1 0x55
  #define ADDR2 0x56
  #define ADDR3 0x57
  #define ADDR4 0x58
  #define PICO_DEFAULT_I2C_SDA_PIN 4
  #define PICO_DEFAULT_I2C_SCL_PIN 5
=}

main reactor {
  preamble {=
    static bool led = false;
    static bool flag = false;

    static struct {
      uint8_t mem[32];
      uint8_t mem_address;
      bool mem_address_written;
    } context;

    static void i2c_slave_handler(i2c_inst_t *i2c, i2c_slave_event_t event) {
      switch (event) {
      case I2C_SLAVE_RECEIVE: // master has written some data
          if (!context.mem_address_written) {
              // writes always start with the memory address
              context.mem_address = i2c_read_byte_raw(i2c);
              context.mem_address_written = true;
          } else {
              // save into memory
              context.mem[context.mem_address] = i2c_read_byte_raw(i2c);
              context.mem_address++;

              led = !led;
              gpio_put(16, !led);
          }
          break;
      case I2C_SLAVE_REQUEST: // master is requesting data
          // load from memory
          i2c_write_byte_raw(i2c, context.mem[context.mem_address]);
          context.mem_address++;
          break;
      case I2C_SLAVE_FINISH: // master has signalled Stop / Restart
          context.mem_address_written = false;
          flag = true;
          break;
      default:
          break;
      }
    }

    static void init() {
      gpio_init(PICO_DEFAULT_I2C_SDA_PIN);
      gpio_init(PICO_DEFAULT_I2C_SCL_PIN);
      gpio_set_function(PICO_DEFAULT_I2C_SDA_PIN, GPIO_FUNC_I2C);
      gpio_set_function(PICO_DEFAULT_I2C_SCL_PIN, GPIO_FUNC_I2C);
      gpio_pull_up(PICO_DEFAULT_I2C_SDA_PIN);
      gpio_pull_up(PICO_DEFAULT_I2C_SCL_PIN);
      i2c_init(i2c0, 100);
    }

    static void run_as_slave() {
      i2c_slave_init(i2c0, ADDR4, &i2c_slave_handler);
    }

    static void run_as_master() {
      i2c_slave_deinit(i2c0);
    }

    static void GPIO_set() {
      gpio_init(15);
      gpio_set_dir(15, GPIO_IN);
      gpio_init(16);
      gpio_set_dir(16, GPIO_OUT);      
    }
  =}

  timer t0(0, 10 ms)
  state master : bool = false
  logical action send;
  logical action feedback;


  reaction(startup) {=
    // I2C initialization
    init();
    run_as_slave();
    GPIO_set();
  =}
  

  reaction(t0)-> send {=
    // Scan button press
    if (!self->master && gpio_get(15)) {
      self->master = true;
      run_as_master();
      lf_schedule(send,0);
    }
  =}

reaction(t0)-> feedback {=
  // Scan button press
  if (flag) {
    lf_schedule(feedback,MSEC(1000));
    flag = false;
  }
=}

  reaction(send) {=
    static const char *const msg = "ADDR4 SENT, ADDR1 RECEIVE";
      uint8_t buf[32];
      buf[0] = 0;
      memcpy(buf + 1, msg, strlen(msg));
      int written = i2c_write_blocking(i2c0, ADDR1, buf, 1+strlen(msg), false);
      printf("bytes written: %d\n", written);
      self->master = false;
      run_as_slave();
  =}

// reaction(feedback) {=
//   run_as_master();
//   uint8_t buf[1] = {0};
//   uint8_t receive[32];
//   i2c_write_blocking(i2c0, ADDR4, buf, 1, false);
//   i2c_read_blocking(i2c0, ADDR4, receive, 25, false);
//   receive[strlen(receive)] = '\0';
//   printf("%s\n",receive);
//   run_as_slave();
//   =}
}

target C {
  platform: {
    name: "rp2040",
    board: "pololu_3pi_2040_robot"
  },
  threading: false,
  cmake-include: ["../../ez2c-lib/ez2c-lib.txt"],
  files: ["../../ez2c-lib/"],
  keepalive: true
}

preamble {=
  #include <ez2c.h>
  #include <hardware/gpio.h>
  #include <hardware/i2c.h>
  #include <pico/stdlib.h>
  #include <stdio.h>

  #define BAUDRATE (100 * 1000)        // I2C baudrate (Hz).
  #define I2C_DEFAULT_TIMEOUT_MS 1000  // Default I2C R/W timeout in milliseconds.
  #define INTERNAL_PULL_UP 0           // Disables (0) or enables (1) Pico's internal pull-up

  #define I2C_SDA_PIN 4                // I2C SDA (data).
  #define I2C_SCL_PIN 5            // I2C SCL (clock).
  #define PULLUP_DEMUX_A0_PIN 14   // Dynamic pull-up selection demux input A0.
  #define PULLUP_DEMUX_A1_PIN 15   // Dynamic pull-up selection demux input A1.
  #define PIO_LO_THRESHOLD_PIN 20  // PIO rise time measurement low threshold input pin.
  #define PIO_HI_THRESHOLD_PIN 21  // PIO rise time measurement high threshold input pin.
=}

main reactor {
  preamble {=
    static bool echo(uint8_t slave_addr, bool verbose) {
      static const char *const msg = "Master Sent!";
      uint8_t buf[32];
      buf[0] = COMMAND_ECHO;
      memcpy(buf, msg, strlen(msg) + 1);
      ez2c_master_write_timeout_ms(slave_addr, buf, 2+strlen(msg), false,
                                   I2C_DEFAULT_TIMEOUT_MS);

      uint8_t recv[32] = {0};
      int bytes_read = ez2c_master_read_timeout_ms(slave_addr, recv,
                                                   1+strlen(msg), false,
                                                   I2C_DEFAULT_TIMEOUT_MS);
      if (bytes_read == PICO_ERROR_GENERIC) {
        if (verbose) printf("Device at %u is disconnected\n", slave_addr);
        return false;
      } else {
        if (verbose) printf("master received: %s\n", recv);
        return true;
      }
    }
  =}
  
  timer output_timer(1 s, 1 s)
  timer echo_timer(3 s, 2 s)
  logical action initial_daa_scan

  reaction(startup) -> initial_daa_scan {=
    static const uint pull_up_demux_pins[] = {
      PULLUP_DEMUX_A0_PIN,
      PULLUP_DEMUX_A1_PIN,
    };
    uint pull_up_level_bits = 
      sizeof(pull_up_demux_pins) / sizeof(pull_up_demux_pins[0]);
    
    // Initialize current device's i2c0 hardware block as master.
    ez2c_master_init(i2c0, BAUDRATE, I2C_SDA_PIN, I2C_SCL_PIN, 
                     PIO_LO_THRESHOLD_PIN, PIO_HI_THRESHOLD_PIN, 
                     pull_up_demux_pins, pull_up_level_bits,
                     INTERNAL_PULL_UP);

    // Perform initial address allocation after a 10 second delay.
    lf_schedule(initial_daa_scan, MSEC(10000));
  =}

  reaction(initial_daa_scan) {=
    ez2c_master_discover();
  =}

  reaction(output_timer) {=
    ez2c_master_signal_output();
  =}

  reaction(echo_timer) {=
    // Poll device change.
    if (ez2c_get_device_change()) {
      // Rescan for new slave devices.
      ez2c_master_discover();
      ez2c_clear_device_change();
    }

    static int echo_index = 0;
    int alive_count = 0;
    for (int i = 0; i < EZ2C_SLAVES_MAX; ++i) {
      if (ez2c_master_slave_addr_reserved(i)) {
        alive_count += echo(i, false);
      }
    }
    printf("echo set %d: %d alive\n", echo_index++, alive_count);
  =}
}

target C {
  platform: {
    name: "rp2040",
    board: "pololu_3pi_2040_robot"
  },
  threading: false,
  cmake-include: ["i2cslave.txt"]
}

preamble {=
  #include <stdio.h>
  #include <pico/stdlib.h>
  #include <pico/unique_id.h>
  #include <hardware/gpio.h>
  #include <hardware/i2c.h>
  #include <pico/i2c_slave.h>
  #include <string.h>

  #define I2C_DEFAULT_SLAVE_ADDR 0x55
  #define PICO_DEFAULT_I2C_SDA_PIN 4
  #define PICO_DEFAULT_I2C_SCL_PIN 5

  #define COMMAND_DISCOVER 0
  #define COMMAND_ASSIGN 1
  #define COMMAND_ECHO 2
=}

main reactor {
  preamble {=
    static bool led;
    static struct {
      uint8_t mem[256];
      uint8_t mem_address;
    } context;

    static void i2c_slave_handler(i2c_inst_t *i2c, i2c_slave_event_t event);

    static void process_command() {
      pico_unique_board_id_t my_id;
      switch (context.mem[0]) {
        case COMMAND_DISCOVER:
          // get id ready for master to read
          pico_get_unique_board_id(context.mem);
          break;

        case COMMAND_ASSIGN:
          // check if this command is for me
          pico_get_unique_board_id(&my_id);
          if (memcmp(&my_id, context.mem + 1, sizeof(my_id) != 0)) {
            // if id doesn't match, terminate
            return;
          }

          // reassign my address
          uint8_t addr = context.mem[1 + sizeof(my_id)];
          i2c_slave_init(i2c0, addr, &i2c_slave_handler);
          break;

        case COMMAND_ECHO:
          // move data to the beginning of mem for master to read
          memmove(context.mem, context.mem + 1, strlen(context.mem + 1));
          break;

        default:
          break;
      }
    }

    static void i2c_slave_handler(i2c_inst_t *i2c, i2c_slave_event_t event) {
      switch (event) {
      case I2C_SLAVE_RECEIVE: // master has written some data
          // save into memory
          context.mem[context.mem_address] = i2c_read_byte_raw(i2c);
          context.mem_address++;

          led = !led;
          gpio_put(16, !led);
          break;

      case I2C_SLAVE_REQUEST: // master is requesting data
          // load from memory
          i2c_write_byte_raw(i2c, context.mem[context.mem_address]);
          context.mem_address++;
          break;

      case I2C_SLAVE_FINISH: // master has signalled Stop / Restart
          context.mem_address = 0;
          process_command();
          break;

      default:
          break;
      }
    }

    static void setup_slave() {
      gpio_init(PICO_DEFAULT_I2C_SDA_PIN);
      gpio_init(PICO_DEFAULT_I2C_SCL_PIN);
      gpio_set_function(PICO_DEFAULT_I2C_SDA_PIN, GPIO_FUNC_I2C);
      gpio_set_function(PICO_DEFAULT_I2C_SCL_PIN, GPIO_FUNC_I2C);
      gpio_pull_up(PICO_DEFAULT_I2C_SDA_PIN);
      gpio_pull_up(PICO_DEFAULT_I2C_SCL_PIN);
      i2c_init(i2c0, 100);
      i2c_slave_init(i2c0, I2C_DEFAULT_SLAVE_ADDR, &i2c_slave_handler);
    }
  =}

  reaction(startup) {=
    setup_slave();
    gpio_init(16);
    gpio_set_dir(16, GPIO_OUT);
  =}
}
